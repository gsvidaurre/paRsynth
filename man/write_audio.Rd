% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/write_audio.R
\name{write_audio}
\alias{write_audio}
\title{Save synthetic audio for each string in a data frame}
\usage{
write_audio(
  df,
  save_path,
  sampling_rate = 150000,
  sylLen = 200,
  prefix = "IndividualSignatures"
)
}
\arguments{
\item{df}{Data frame. A data frame object generated by \code{frequency_anchors()} that contains the frequency anchor values and string metadata.}

\item{save_path}{Character string. The directory where the sound files will be saved on your machine.}

\item{sampling_rate}{Numeric value. The sampling rate for the audio file, in Hz. The default is 150000. This is an argument used directly by \code{soundgen::soundgen()}.}

\item{sylLen}{Numeric value. The length of the syllable in milliseconds. The default is 200 ms. This is an argument used directly by \code{soundgen::soundgen()}.}

\item{prefix}{Character string. A prefix for each audio file name that can be used to distinguish among calls for different datasets, for instance "IndividualSignatures" versus "GroupSignatures" when creating datasets with more or less individual versus group information. The default is "IndividualSignatures".}
}
\value{
This function writes one audio file per vocalization (row) in the input data frame. Each aduio file name contains the group, individual, and call identifiers, as well as the prefix supplied to the function. The function also returns the input data frame with an additional column that contains the name of each audio file, which can be used in downstream bioacoustics analyses.
}
\description{
\code{write_audio} function loops through each row in the data frame and uses the \code{gen_synth_signal} function, which is a wrapper for the \code{soundgen::soundgen()}, to generate and save audio files in .WAV format for each string.
}
\details{
This function uses the frequency anchors generated by \code{frequency_anchors()} to create a synthetic frequency modulated vocalization that contains specific levels of group and individual information. The information about social affiliation or individual identity is contained in the frequency modulation patterns and their convergence or divergence with respect to group members.This function relies on the \code{soundgen} package to create synthetic audio files. The current version of this function uses the general default values in the \code{soundgen::soundgen()} package, which can be further customized as needed to add or remove different acoustic features from the synthetic files.
}
\examples{
seed <- 8
set.seed(seed) # For reproducibility
library(tidyverse)

example_calls <- generate_strings(n_groups = 2, n_individuals = 5, n_calls = 10, string_length = 16, group_information = 8, individual_information = 2)

example_calls_parsons <- parsons_code(example_calls, "Call", list("A" = "up", "B" = "down", "C" = "constant"))

anchors <- frequency_anchors(example_calls_parsons, "Parsons_Code", "Group", "Individual", "Call_ID", "Call", starting_frequency = 4000, frequency_shift = 1000)

path <- "~/Desktop" # Update this path to reflect your own directory structure
tmp_dir <- "testing"
tmp_path <- file.path(path, tmp_dir)

# Create the temporary directory if it doesn't already exist
if(!dir.exists(tmp_path)){
 dir.create(tmp_path)
}

# Write out a randomly subsample of the full dataset of vocalizations
set.seed(seed)
inds <- sample(1:nrow(anchors), 10, replace = FALSE)
write_audio(anchors[inds, ], save_path = tmp_path, sampling_rate = 150000, sylLen = 200, prefix = "IndividualSignatures")

# Remove the temporary directory and all files within it
if(tmp_path == file.path(path, tmp_dir)){
 unlink(tmp_path, recursive = TRUE)
}

}
\author{
Ari Cross, Grace Smith-Vidaurre
}
